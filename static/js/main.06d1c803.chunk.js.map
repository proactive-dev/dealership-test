{"version":3,"sources":["components/activities/DealershipInventoryActivity/DealershipInventoryActivity.module.css","components/activities/DealershipDetailActivity/DealershipDetailActivity.module.css","generated/graphql.tsx","components/activities/DealershipInventoryActivity/dataService.ts","components/activities/DealershipInventoryActivity/DealershipInventoryActivity.tsx","components/activities/DealershipDetailActivity/dataService.ts","components/activities/DealershipDetailActivity/DealershipDetailActivity.tsx","services/apolloService.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CacheControlScope","DealershipDetailActivityDocument","gql","DealershipInventoryActivityDocument","useDealershipInventoryActivityQuery","baseOptions","tuple","ApolloReactHooks","data","dealerships","_","map","dealership","id","name","logoUrl","address","styles","require","DealershipInventoryActivity","props","queryTuple","dataService","className","container","loading","href","target","key","useDealershipDetailActivityQuery","variables","vehicles","DealershipDetailActivity","useParams","vehicle","imageUrl","type","displayName","__client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","App","client","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gLACAA,EAAOC,QAAU,CAAC,UAAY,+CAA+C,WAAa,kD,mBCA1FD,EAAOC,QAAU,CAAC,UAAY,4CAA4C,QAAU,4C,2CCaxEC,E,upBAAAA,K,gBAAAA,E,mBAAAA,M,KA8EL,IAAMC,EAAmCC,IAAH,KAgDtC,IAAMC,EAAsCD,IAAH,KC3HzC,SAASE,IAAuC,IAAD,EDqJFC,ECpJ5CC,EDqJOC,IAAuGJ,EAAqCE,GCnJnJG,EAAc,CAClBC,YAAa,IAWf,OATA,UAAIH,EAAME,YAAV,aAAI,EAAYC,eACdD,EAAKC,YAAcC,IAAEC,IAAIL,EAAME,KAAKC,aAAa,SAACG,GAAD,MAA8B,CAC7EC,GAAID,EAAWC,GACfC,KAAMF,EAAWE,KACjBC,QAASH,EAAWG,QACpBC,QAASJ,EAAWI,aAIjB,eACFV,EADL,CAEEE,SC7BJ,IAAMS,EAASC,EAAQ,IAIVC,EAAwC,SAAAC,GACnD,IAAMC,EAAaC,IAGnB,OACE,uBAAKC,UAAWN,EAAOO,WAAvB,iCAGIH,EAAWI,SACXf,IAAEC,IAAIU,EAAWb,KAAKC,aAAa,SAAAG,GAAU,OAC3C,uBAAKW,UAAWN,EAAOL,YACnB,qBAAGc,KAAI,sBAAiBd,EAAWC,IAAMc,OAAO,QAAQC,IAAKhB,EAAWC,IACnED,EAAWE,KADhB,MACyBF,EAAWG,eCY3C,SAASc,EAAiChB,GAAU,IAAD,EHkGTR,EGjGzCC,GHiGyCD,EGjGpB,CAACyB,UAAW,CAACjB,OHkG3BN,IAAiGN,EAAkCI,IGhG1IG,EAAqB,CACzBI,WAAY,IAEd,aAAIN,EAAME,YAAV,aAAI,EAAYI,WAAY,CAAC,IAAD,EACpBA,EAAU,UAAGN,EAAME,YAAT,aAAG,EAAYI,WAC/BJ,EAAKI,WAAa,CAChBC,GAAID,EAAWC,GACfC,KAAMF,EAAWE,KACjBC,QAASH,EAAWG,QACpBC,QAASJ,EAAWI,QACpBe,SAAUnB,EAAWmB,UAIzB,OAAO,eACFzB,EADL,CAEEE,SC3CJ,IAAMS,EAASC,EAAQ,IAIVc,EAAqC,SAAAZ,GAAU,IAEpDC,EAAaC,EADNW,cAANpB,IAIP,OACE,uBAAKU,UAAWN,EAAOO,WAAvB,8BAGIH,EAAWI,SAAWJ,EAAWb,KAAKI,YACpC,uBAAKW,UAAWN,EAAOiB,SACpBb,EAAWb,KAAKI,WAAWE,KAAK,2BAChCO,EAAWb,KAAKI,WAAWC,GAAG,2BAC9BQ,EAAWb,KAAKI,WAAWI,QAAQ,2BACnCK,EAAWb,KAAKI,WAAWG,QAAQ,2BAElCL,IAAEC,IAAIU,EAAWb,KAAKI,WAAWmB,UAAU,SAAAG,GAAO,OAChD,2BACGA,EAAQpB,KAAK,2BACboB,EAAQrB,GAAG,2BACXqB,EAAQlB,QAAQ,2BAChBkB,EAAQC,SAAS,2BACjBD,EAAQE,KAAKC,gBAZtB,O,+BCbJC,EAAgD,IAAIC,IAAa,CACrEC,MAAO,IAAIC,IACXC,KAAM,IAAIC,IAAS,CACjBC,IAAK,yDCEF,IAAMC,EAAgB,SAAAzB,GAC3B,OACE,gBAAC,IAAD,CAAgB0B,ODGXR,GCFH,gBAAC,IAAD,KACE,gBAAC,IAAD,KAEE,gBAAC,IAAD,CACES,OAAK,EACLC,KAAK,IACLC,UAAW9B,IAEb,gBAAC,IAAD,CACE4B,OAAK,EACLC,KAAK,kBACLC,UAAWjB,QCjBHkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,gBAAC,aAAD,KACE,gBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.06d1c803.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DealershipInventoryActivity_container__C1Wzx\",\"dealership\":\"DealershipInventoryActivity_dealership__2cdcH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DealershipDetailActivity_container__AnLv1\",\"vehicle\":\"DealershipDetailActivity_vehicle__r06TB\"};","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Upload: any;\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\nexport type Dealership = {\n   __typename?: 'Dealership';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  address: Scalars['String'];\n  logoUrl: Scalars['String'];\n  vehicles: Array<Vehicle>;\n};\n\nexport type Query = {\n   __typename?: 'Query';\n  version: Scalars['String'];\n  dealership: Dealership;\n  dealerships: Array<Dealership>;\n};\n\n\nexport type QueryDealershipArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type Vehicle = {\n   __typename?: 'Vehicle';\n  id: Scalars['ID'];\n  owningDealership: Dealership;\n  type: VehicleType;\n  name: Scalars['String'];\n  address: Scalars['String'];\n  imageUrl: Scalars['String'];\n  priceCentsPerDay: Scalars['Int'];\n};\n\nexport type VehicleType = {\n   __typename?: 'VehicleType';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  displayName: Scalars['String'];\n};\n\nexport type DealershipDetailActivityQueryVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type DealershipDetailActivityQuery = (\n  { __typename?: 'Query' }\n  & { dealership: (\n    { __typename?: 'Dealership' }\n    & Pick<Dealership, 'id' | 'name' | 'address' | 'logoUrl'>\n    & { vehicles: Array<(\n      { __typename?: 'Vehicle' }\n      & Pick<Vehicle, 'id' | 'name' | 'address' | 'imageUrl' | 'priceCentsPerDay'>\n      & { type: (\n        { __typename?: 'VehicleType' }\n        & Pick<VehicleType, 'id' | 'name' | 'displayName'>\n      ) }\n    )> }\n  ) }\n);\n\nexport type DealershipInventoryActivityQueryVariables = {};\n\n\nexport type DealershipInventoryActivityQuery = (\n  { __typename?: 'Query' }\n  & { dealerships: Array<(\n    { __typename?: 'Dealership' }\n    & Pick<Dealership, 'id' | 'name' | 'address' | 'logoUrl'>\n  )> }\n);\n\n\nexport const DealershipDetailActivityDocument = gql`\n    query DealershipDetailActivity($id: ID!) {\n  dealership(id: $id) {\n    id\n    name\n    address\n    logoUrl\n    vehicles {\n      id\n      name\n      address\n      imageUrl\n      priceCentsPerDay\n      type {\n        id\n        name\n        displayName\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useDealershipDetailActivityQuery__\n *\n * To run a query within a React component, call `useDealershipDetailActivityQuery` and pass it any options that fit your needs.\n * When your component renders, `useDealershipDetailActivityQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDealershipDetailActivityQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDealershipDetailActivityQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<DealershipDetailActivityQuery, DealershipDetailActivityQueryVariables>) {\n        return ApolloReactHooks.useQuery<DealershipDetailActivityQuery, DealershipDetailActivityQueryVariables>(DealershipDetailActivityDocument, baseOptions);\n      }\nexport function useDealershipDetailActivityLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<DealershipDetailActivityQuery, DealershipDetailActivityQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<DealershipDetailActivityQuery, DealershipDetailActivityQueryVariables>(DealershipDetailActivityDocument, baseOptions);\n        }\nexport type DealershipDetailActivityQueryHookResult = ReturnType<typeof useDealershipDetailActivityQuery>;\nexport type DealershipDetailActivityLazyQueryHookResult = ReturnType<typeof useDealershipDetailActivityLazyQuery>;\nexport type DealershipDetailActivityQueryResult = ApolloReactCommon.QueryResult<DealershipDetailActivityQuery, DealershipDetailActivityQueryVariables>;\nexport const DealershipInventoryActivityDocument = gql`\n    query DealershipInventoryActivity {\n  dealerships {\n    id\n    name\n    address\n    logoUrl\n  }\n}\n    `;\n\n/**\n * __useDealershipInventoryActivityQuery__\n *\n * To run a query within a React component, call `useDealershipInventoryActivityQuery` and pass it any options that fit your needs.\n * When your component renders, `useDealershipInventoryActivityQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDealershipInventoryActivityQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useDealershipInventoryActivityQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<DealershipInventoryActivityQuery, DealershipInventoryActivityQueryVariables>) {\n        return ApolloReactHooks.useQuery<DealershipInventoryActivityQuery, DealershipInventoryActivityQueryVariables>(DealershipInventoryActivityDocument, baseOptions);\n      }\nexport function useDealershipInventoryActivityLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<DealershipInventoryActivityQuery, DealershipInventoryActivityQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<DealershipInventoryActivityQuery, DealershipInventoryActivityQueryVariables>(DealershipInventoryActivityDocument, baseOptions);\n        }\nexport type DealershipInventoryActivityQueryHookResult = ReturnType<typeof useDealershipInventoryActivityQuery>;\nexport type DealershipInventoryActivityLazyQueryHookResult = ReturnType<typeof useDealershipInventoryActivityLazyQuery>;\nexport type DealershipInventoryActivityQueryResult = ApolloReactCommon.QueryResult<DealershipInventoryActivityQuery, DealershipInventoryActivityQueryVariables>;","import _ from 'lodash';\r\n\r\nimport { useDealershipInventoryActivityQuery as useBaseQuery } from 'generated/graphql';\r\n\r\n\r\n\r\nexport interface IDealership {\r\n  id: string;\r\n  name: string;\r\n  address: string;\r\n  logoUrl: string;\r\n}\r\n\r\nexport interface IData {\r\n  dealerships: IDealership[];\r\n}\r\n\r\nexport function useDealershipInventoryActivityQuery() {\r\n  const tuple = useBaseQuery();\r\n\r\n  const data: IData = {\r\n    dealerships: []\r\n  };\r\n  if (tuple.data?.dealerships) {\r\n    data.dealerships = _.map(tuple.data.dealerships, (dealership): IDealership => ({\r\n      id: dealership.id,\r\n      name: dealership.name,\r\n      logoUrl: dealership.logoUrl,\r\n      address: dealership.address\r\n    }));\r\n  }\r\n\r\n  return {\r\n    ...tuple,\r\n    data\r\n  };\r\n}\r\n","import * as React from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport * as dataService from './dataService';\r\n\r\nconst styles = require('./DealershipInventoryActivity.module.css');\r\n\r\n\r\n\r\nexport const DealershipInventoryActivity: React.FC = props => {\r\n  const queryTuple = dataService.useDealershipInventoryActivityQuery();\r\n\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      Dealership Inventory Activity\r\n\r\n      {!queryTuple.loading &&\r\n        _.map(queryTuple.data.dealerships, dealership => (\r\n          <div className={styles.dealership}>\r\n              <a href={`/dealership/${dealership.id}`} target='blank' key={dealership.id}>\r\n                  {dealership.name} / {dealership.logoUrl}\r\n              </a>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n","import _ from 'lodash';\r\n\r\nimport { useDealershipDetailActivityQuery as useBaseQuery } from 'generated/graphql';\r\n\r\n\r\n\r\nexport interface IVehicleType {\r\n  id: string;\r\n  name: string;\r\n  displayName: string;\r\n}\r\n\r\nexport interface IVehicle {\r\n  id: string;\r\n  name: string;\r\n  address: string;\r\n  imageUrl: string;\r\n  priceCentsPerDay: number;\r\n  type: IVehicleType;\r\n}\r\n\r\nexport interface IDealership {\r\n  id: string;\r\n  name: string;\r\n  address: string;\r\n  logoUrl: string;\r\n  vehicles: IVehicle[];\r\n}\r\n\r\nexport interface IData {\r\n  dealership: IDealership;\r\n}\r\n\r\nexport function useDealershipDetailActivityQuery(id: any) {\r\n  const tuple = useBaseQuery({variables: {id}});\r\n\r\n  const data: IData = <IData>{\r\n    dealership: {}\r\n  };\r\n  if (tuple.data?.dealership) {\r\n    const dealership = tuple.data?.dealership\r\n    data.dealership = {\r\n      id: dealership.id,\r\n      name: dealership.name,\r\n      logoUrl: dealership.logoUrl,\r\n      address: dealership.address,\r\n      vehicles: dealership.vehicles\r\n    };\r\n  }\r\n\r\n  return {\r\n    ...tuple,\r\n    data\r\n  };\r\n}\r\n","import * as React from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport {\r\n  useParams\r\n} from 'react-router-dom';\r\n\r\nimport * as dataService from './dataService';\r\n\r\nconst styles = require('./DealershipDetailActivity.module.css');\r\n\r\n\r\n\r\nexport const DealershipDetailActivity: React.FC = props => {\r\n  const {id} = useParams();\r\n  const queryTuple = dataService.useDealershipDetailActivityQuery(id);\r\n\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      Dealership Detail Activity\r\n\r\n      {!queryTuple.loading && queryTuple.data.dealership &&\r\n          <div className={styles.vehicle}>\r\n            {queryTuple.data.dealership.name}<br/>\r\n            {queryTuple.data.dealership.id}<br/>\r\n            {queryTuple.data.dealership.address}<br/>\r\n            {queryTuple.data.dealership.logoUrl}<br/>\r\n            {\r\n              _.map(queryTuple.data.dealership.vehicles, vehicle => (\r\n                <div>\r\n                  {vehicle.name}<br/>\r\n                  {vehicle.id}<br/>\r\n                  {vehicle.address}<br/>\r\n                  {vehicle.imageUrl}<br/>\r\n                  {vehicle.type.displayName}\r\n                </div>\r\n              ))}\r\n            }\r\n          </div>\r\n        }\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  InMemoryCache,\r\n  NormalizedCacheObject\r\n} from 'apollo-cache-inmemory';\r\n\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { HttpLink } from 'apollo-link-http';\r\n\r\n\r\n\r\nconst __client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link: new HttpLink({\r\n    uri: 'https://candidate-api-2020-03.ironforge.co/graphql'\r\n  })\r\n});\r\n\r\n\r\n\r\nexport function getClient() {\r\n  return __client;\r\n}\r\n","import * as React from 'react';\n\nimport {\n  BrowserRouter,\n  Switch,\n  Route\n} from 'react-router-dom';\n\nimport { DealershipInventoryActivity } from './components/activities/DealershipInventoryActivity/DealershipInventoryActivity';\nimport { DealershipDetailActivity } from './components/activities/DealershipDetailActivity/DealershipDetailActivity';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport * as apolloService from 'services/apolloService';\n\n\n\nexport const App: React.FC = props => {\n  return (\n    <ApolloProvider client={apolloService.getClient()}>\n      <BrowserRouter>\n        <Switch>\n\n          <Route\n            exact\n            path=\"/\"\n            component={DealershipInventoryActivity} />\n\n          <Route\n            exact\n            path=\"/dealership/:id\"\n            component={DealershipDetailActivity} />\n\n        </Switch>\n      </BrowserRouter>\n    </ApolloProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}